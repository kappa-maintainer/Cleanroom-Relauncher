apply from: 'gradle/scripts/helpers.gradle'

repositories {
    // Other repositories described by default:
    // CleanroomMC: https://maven.cleanroommc.com

    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
    }
    maven {
        name 'Modrinth'
        url 'https://api.modrinth.com/maven'
    }
    maven {
        url "https://repo.cleanroommc.com/releases"
    }

    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation("com.google.code.findbugs:jsr305:3.0.2")
    shadow 'org.apache.httpcomponents.client5:httpclient5:5.5'
    shadow 'org.apache.httpcomponents.core5:httpcore5-h2:5.3.4'
    shadow 'org.apache.httpcomponents.core5:httpcore5:5.3.4'
    shadow 'org.slf4j:slf4j-api:2.0.17'
    shadow 'com.cleanroommc:java-utils:1.1.2'

    shadow 'com.miglayout:miglayout-core:5.3'
    shadow 'com.miglayout:miglayout-swing:5.3'
/*
    contain 'com.github.oshi:oshi-core:6.8.0'
    contain 'net.java.dev.jna:jna:5.17.0'
    contain 'net.java.dev.jna:jna-platform:5.17.0'
    contain 'net.java.dev.jna:jna-jpms:5.17.0'
*/

    // Example - Dependency descriptor:
    // 'com.google.code.gson:gson:2.8.6' << group: com.google.code.gson, name:gson, version:2.8.6
    // 'group:name:version:classifier' where classifier is optional

    // Example - CurseMaven dependencies:
    // 'curse.maven:had-enough-items-557549:4543375' << had-enough-items = project slug, 557549 = project id, 4543375 = file id
    // Full documentation: https://cursemaven.com/

    // Example - Modrinth dependencies:
    // 'maven.modrinth:jei:4.16.1.1000' << jei = project name, 4.16.1.1000 = file version
    // Full documentation: https://docs.modrinth.com/docs/tutorials/maven/

    // Common dependency types (configuration):
    // implementation = dependency available at both compile time and runtime
    // runtimeOnly = runtime dependency
    // compileOnly = compile time dependency
    // annotationProcessor = annotation processing dependencies
    // contain = bundle dependency jars into final artifact, will extract them in mod loading. Please only do this to non-mod dependencies.
    // shadow = bundle dependencies into shadow output artifact (relocation configurable in shadowJar task)
    // modImplementation = mod dependency available at both compile time and runtime
    // modCompileOnly = mod dependency available only at compile time

    // Transitive dependencies:
    // (Dependencies that your dependency depends on)
    // If you wish to exclude transitive dependencies in the described dependencies
    // Use a closure as such:
    // implementation ('com.google.code.gson:gson:2.8.6') {
    //     transitive = false
    // }
}
